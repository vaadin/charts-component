{
  "schema_version": "1.0.0",
  "namespaces": [
    {
      "name": "Vaadin",
      "description": "",
      "summary": "",
      "sourceRange": {
        "file": "vaadin-chart-series.html",
        "start": {
          "line": 497,
          "column": 6
        },
        "end": {
          "line": 497,
          "column": 42
        }
      },
      "elements": [
        {
          "description": "`<vaadin-chart-series>` is a Polymer 2 element for creating series for Vaadin Charts.\n\n### Basic use\n\nTo use `<vaadin-chart-series>`, simply add it inside a `<vaadin-chart>` element:\n\n```\n <vaadin-chart>\n   <vaadin-chart-series></vaadin-chart-series>\n </vaadin-chart>\n```\n\n`<vaadin-chart-series>` accepts `values` as an array attribute, so you can add it to your element definition:\n\n```\n <vaadin-chart-series values=\"[10,20,30,40,50]\"></vaadin-chart-series>\n```\n\nwhich will add a new line series, where each value will be a data point.\nLook for the Properties session to see all available attributes.\n\n### Dynamically adding and removing series\n\nYou are also able to add and remove series by using DOM API.\n\nTo create a new series, simply call `document.createElement('vaadin-chart-series')` and append it to your `<vaadin-chart>`:\n\n```\n const chart = \\* a <vaadin-chart> reference *\\\n const newSeries = document.createElement('vaadin-chart-series');\n newSeries.values = [10,20,30,40,50];\n chart.appendChild(newSeries);\n```\n\nIn order to remove it, you should use the series to be removed as a reference for the `#removeChild()` call:\n\n```\n const chart = \\* a <vaadin-chart> reference *\\\n const seriesToBeRemoved = \\* a <vaadin-chart-series> reference to remove*\\\n chart.removeChild(seriesToBeRemoved);\n```\n\n(There's an issue with `#remove()` method on Firefox, so we advice to remove the element from its parent)",
          "summary": "",
          "path": "vaadin-chart-series.html",
          "properties": [
            {
              "name": "values",
              "type": "Array",
              "description": "An array of data used by the series.\nFormat depends on the chart type and can be:\n  - An array of numerical values `[y0, y1, y2, y3,...]`\n  - An array of arrays with 2 values (`x`, `y`) `[ [x0, y0], [x1, y1], [x2, y2], ... ]`\n  - An array of objects, each one describing one point `[ {x: x0, y: y0, name: 'Point0', color: '#FF0000'}, {...}, ...]`\n\n See more in [API Site](https://api.highcharts.com/highcharts/series)\n\nNote that you should always use [Polymer API](https://www.polymer-project.org/2.0/docs/devguide/model-data#array-mutation)\nto mutate the values array in order to make the component aware of the\nchange and be able to synchronize it.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 139,
                  "column": 12
                },
                "end": {
                  "line": 142,
                  "column": 13
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "[]"
            },
            {
              "name": "valueLabels",
              "type": "ChartLabelsMapper",
              "description": "Labels for the series values. Acceptable input are:\n- An array e.g `'[\"Mon\", \"Tue\", \"Wed\", \"Thur\", \"Fri\"]'`. This maps to corresponding values by position.\n- A mapping object e.g `'{10: \"Mon\", 20: \"Tue\", 30: \"Wed\"}'`. This maps to specific values.\n- A function e.g `'e => e + \"km\"'`. This is evaluated against every value to generate its label.\n\nAny data point not covered (e.g value not present in the mapping object\nor mapping array shorter than the list of values), results in the actual value being used as the label.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 153,
                  "column": 12
                },
                "end": {
                  "line": 156,
                  "column": 13
                }
              },
              "metadata": {
                "polymer": {}
              }
            },
            {
              "name": "__labelsMapper",
              "type": "ChartLabelsMapper",
              "description": "Internal valueLabels representation so that the original property/attribute set\non valueLabels can be preserved.",
              "privacy": "private",
              "sourceRange": {
                "start": {
                  "line": 162,
                  "column": 12
                },
                "end": {
                  "line": 165,
                  "column": 13
                }
              },
              "metadata": {
                "polymer": {}
              }
            },
            {
              "name": "valueMin",
              "type": "number",
              "description": "Value-axis minimum-value.\n Sets the value to a series bound by 'unit' property.\n Otherwise sets the value to the first series.\n Undefined by default (determined from data).",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 173,
                  "column": 12
                },
                "end": {
                  "line": 177,
                  "column": 13
                }
              },
              "metadata": {
                "polymer": {
                  "observer": "\"__valueMinObserver\""
                }
              }
            },
            {
              "name": "valueMax",
              "type": "number",
              "description": "Value-axis maximum-value.\n See the 'valueMin'",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 183,
                  "column": 12
                },
                "end": {
                  "line": 187,
                  "column": 13
                }
              },
              "metadata": {
                "polymer": {
                  "observer": "\"__valueMaxObserver\""
                }
              }
            },
            {
              "name": "type",
              "type": "string",
              "description": "A string with the type of the series.\n Defaults to `'line'` in case no type is set for the chart.\nNote that `'bar'`, `'gauge'` and `'solidgauge'` should be set as default series type on `<vaadin-chart>`.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 194,
                  "column": 12
                },
                "end": {
                  "line": 198,
                  "column": 13
                }
              },
              "metadata": {
                "polymer": {
                  "observer": "\"__typeObserver\""
                }
              }
            },
            {
              "name": "title",
              "type": "string",
              "description": "The name of the series as shown in the legend, tooltip etc.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 203,
                  "column": 12
                },
                "end": {
                  "line": 207,
                  "column": 13
                }
              },
              "metadata": {
                "polymer": {
                  "observer": "\"__titleObserver\""
                }
              }
            },
            {
              "name": "markers",
              "type": "string",
              "description": "Shows/hides data-point markers for line-like series.\nAcceptable input are:\n - `shown`: markers are always visible\n - `hidden`: markers are always hidden\n - `auto`: markers are visible for widespread data and hidden, when data is dense *(default)*",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 216,
                  "column": 12
                },
                "end": {
                  "line": 220,
                  "column": 13
                }
              },
              "metadata": {
                "polymer": {
                  "observer": "\"__markersObserver\""
                }
              }
            },
            {
              "name": "unit",
              "type": "string",
              "description": "Used to connect the series to an axis; if multiple series have the same “unit”, they will share axis.\nDisplayed as a title for the axis.\nIf no unit is defined, then series will be connected to the first axis.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 226,
                  "column": 12
                },
                "end": {
                  "line": 230,
                  "column": 13
                }
              },
              "metadata": {
                "polymer": {
                  "observer": "\"__unitObserver\""
                }
              }
            },
            {
              "name": "stack",
              "type": "string",
              "description": "Used to group series in a different stacks.\n\"stacking\" property should be specified either for each series or in plotOptions.\nIt is recommended to place series in a single stack, when they belong to the same yAxis.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 236,
                  "column": 12
                },
                "end": {
                  "line": 240,
                  "column": 13
                }
              },
              "metadata": {
                "polymer": {
                  "observer": "\"__stackObserver\""
                }
              }
            },
            {
              "name": "stacking",
              "type": "string",
              "description": "Used to group series in a stacked chart.\nCan be specified for each series separately or at chart's plotOptions for the entire chart.\nPossible values are null, \"normal\" or \"percent\".\nIf \"stack\" property is not defined, then series will be put into default stack.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 247,
                  "column": 12
                },
                "end": {
                  "line": 251,
                  "column": 13
                }
              },
              "metadata": {
                "polymer": {
                  "observer": "\"__stackingObserver\""
                }
              }
            },
            {
              "name": "options",
              "type": "Object",
              "description": "Object with the configured options defined and used to create a series.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 258,
                  "column": 12
                },
                "end": {
                  "line": 260,
                  "column": 13
                }
              },
              "metadata": {
                "polymer": {}
              }
            },
            {
              "name": "additionalOptions",
              "type": "Object",
              "description": "Represents additional JSON configuration.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 265,
                  "column": 12
                },
                "end": {
                  "line": 268,
                  "column": 13
                }
              },
              "metadata": {
                "polymer": {}
              }
            }
          ],
          "methods": [
            {
              "name": "disconnectedCallback",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "start": {
                  "line": 281,
                  "column": 8
                },
                "end": {
                  "line": 286,
                  "column": 9
                }
              },
              "metadata": {},
              "params": []
            },
            {
              "name": "setSeries",
              "description": "Method to attach a series object of type `Highcharts.Series`.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 292,
                  "column": 8
                },
                "end": {
                  "line": 297,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "series",
                  "description": "Object of type `Highcharts.Series`"
                }
              ]
            },
            {
              "name": "__valuesObserver",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "start": {
                  "line": 299,
                  "column": 8
                },
                "end": {
                  "line": 303,
                  "column": 9
                }
              },
              "metadata": {},
              "params": []
            },
            {
              "name": "_deserializeValue",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "start": {
                  "line": 306,
                  "column": 8
                },
                "end": {
                  "line": 312,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "value"
                },
                {
                  "name": "type"
                }
              ]
            },
            {
              "name": "_serializeValue",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "start": {
                  "line": 315,
                  "column": 8
                },
                "end": {
                  "line": 320,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "value"
                }
              ]
            },
            {
              "name": "__additionalOptionsObserver",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "start": {
                  "line": 322,
                  "column": 8
                },
                "end": {
                  "line": 326,
                  "column": 9
                }
              },
              "metadata": {},
              "params": []
            },
            {
              "name": "__labelsObserver",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "start": {
                  "line": 328,
                  "column": 8
                },
                "end": {
                  "line": 339,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "changeRecord"
                },
                {
                  "name": "values"
                }
              ]
            },
            {
              "name": "__computeData",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "start": {
                  "line": 341,
                  "column": 8
                },
                "end": {
                  "line": 343,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "values"
                }
              ]
            },
            {
              "name": "__valueMinObserver",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "start": {
                  "line": 345,
                  "column": 8
                },
                "end": {
                  "line": 360,
                  "column": 9
                }
              },
              "metadata": {},
              "params": []
            },
            {
              "name": "__valueMaxObserver",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "start": {
                  "line": 362,
                  "column": 8
                },
                "end": {
                  "line": 377,
                  "column": 9
                }
              },
              "metadata": {},
              "params": []
            },
            {
              "name": "__typeObserver",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "start": {
                  "line": 379,
                  "column": 8
                },
                "end": {
                  "line": 385,
                  "column": 9
                }
              },
              "metadata": {},
              "params": []
            },
            {
              "name": "__titleObserver",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "start": {
                  "line": 387,
                  "column": 8
                },
                "end": {
                  "line": 393,
                  "column": 9
                }
              },
              "metadata": {},
              "params": []
            },
            {
              "name": "__stackObserver",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "start": {
                  "line": 395,
                  "column": 8
                },
                "end": {
                  "line": 403,
                  "column": 9
                }
              },
              "metadata": {},
              "params": []
            },
            {
              "name": "__stackingObserver",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "start": {
                  "line": 405,
                  "column": 8
                },
                "end": {
                  "line": 418,
                  "column": 9
                }
              },
              "metadata": {},
              "params": []
            },
            {
              "name": "__isStackingValid",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "start": {
                  "line": 420,
                  "column": 8
                },
                "end": {
                  "line": 426,
                  "column": 9
                }
              },
              "metadata": {},
              "params": []
            },
            {
              "name": "__unitObserver",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "start": {
                  "line": 428,
                  "column": 8
                },
                "end": {
                  "line": 443,
                  "column": 9
                }
              },
              "metadata": {},
              "params": []
            },
            {
              "name": "__hasSeriesConfig",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "start": {
                  "line": 445,
                  "column": 8
                },
                "end": {
                  "line": 447,
                  "column": 9
                }
              },
              "metadata": {},
              "params": []
            },
            {
              "name": "__isMarkersValid",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "start": {
                  "line": 449,
                  "column": 8
                },
                "end": {
                  "line": 455,
                  "column": 9
                }
              },
              "metadata": {},
              "params": []
            },
            {
              "name": "__markersObserver",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "start": {
                  "line": 457,
                  "column": 8
                },
                "end": {
                  "line": 467,
                  "column": 9
                }
              },
              "metadata": {},
              "params": []
            },
            {
              "name": "__showWarn",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "start": {
                  "line": 487,
                  "column": 8
                },
                "end": {
                  "line": 489,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "propertyName"
                },
                {
                  "name": "acceptedValues"
                }
              ]
            }
          ],
          "staticMethods": [],
          "demos": [
            {
              "url": "demo/index.html",
              "description": ""
            }
          ],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 74,
              "column": 6
            },
            "end": {
              "line": 490,
              "column": 7
            }
          },
          "privacy": "public",
          "superclass": "HTMLElement",
          "name": "Vaadin.ChartSeriesElement",
          "attributes": [
            {
              "name": "values",
              "description": "An array of data used by the series.\nFormat depends on the chart type and can be:\n  - An array of numerical values `[y0, y1, y2, y3,...]`\n  - An array of arrays with 2 values (`x`, `y`) `[ [x0, y0], [x1, y1], [x2, y2], ... ]`\n  - An array of objects, each one describing one point `[ {x: x0, y: y0, name: 'Point0', color: '#FF0000'}, {...}, ...]`\n\n See more in [API Site](https://api.highcharts.com/highcharts/series)\n\nNote that you should always use [Polymer API](https://www.polymer-project.org/2.0/docs/devguide/model-data#array-mutation)\nto mutate the values array in order to make the component aware of the\nchange and be able to synchronize it.",
              "sourceRange": {
                "start": {
                  "line": 139,
                  "column": 12
                },
                "end": {
                  "line": 142,
                  "column": 13
                }
              },
              "metadata": {},
              "type": "Array"
            },
            {
              "name": "value-labels",
              "description": "Labels for the series values. Acceptable input are:\n- An array e.g `'[\"Mon\", \"Tue\", \"Wed\", \"Thur\", \"Fri\"]'`. This maps to corresponding values by position.\n- A mapping object e.g `'{10: \"Mon\", 20: \"Tue\", 30: \"Wed\"}'`. This maps to specific values.\n- A function e.g `'e => e + \"km\"'`. This is evaluated against every value to generate its label.\n\nAny data point not covered (e.g value not present in the mapping object\nor mapping array shorter than the list of values), results in the actual value being used as the label.",
              "sourceRange": {
                "start": {
                  "line": 153,
                  "column": 12
                },
                "end": {
                  "line": 156,
                  "column": 13
                }
              },
              "metadata": {},
              "type": "ChartLabelsMapper"
            },
            {
              "name": "value-min",
              "description": "Value-axis minimum-value.\n Sets the value to a series bound by 'unit' property.\n Otherwise sets the value to the first series.\n Undefined by default (determined from data).",
              "sourceRange": {
                "start": {
                  "line": 173,
                  "column": 12
                },
                "end": {
                  "line": 177,
                  "column": 13
                }
              },
              "metadata": {},
              "type": "number"
            },
            {
              "name": "value-max",
              "description": "Value-axis maximum-value.\n See the 'valueMin'",
              "sourceRange": {
                "start": {
                  "line": 183,
                  "column": 12
                },
                "end": {
                  "line": 187,
                  "column": 13
                }
              },
              "metadata": {},
              "type": "number"
            },
            {
              "name": "type",
              "description": "A string with the type of the series.\n Defaults to `'line'` in case no type is set for the chart.\nNote that `'bar'`, `'gauge'` and `'solidgauge'` should be set as default series type on `<vaadin-chart>`.",
              "sourceRange": {
                "start": {
                  "line": 194,
                  "column": 12
                },
                "end": {
                  "line": 198,
                  "column": 13
                }
              },
              "metadata": {},
              "type": "string"
            },
            {
              "name": "title",
              "description": "The name of the series as shown in the legend, tooltip etc.",
              "sourceRange": {
                "start": {
                  "line": 203,
                  "column": 12
                },
                "end": {
                  "line": 207,
                  "column": 13
                }
              },
              "metadata": {},
              "type": "string"
            },
            {
              "name": "markers",
              "description": "Shows/hides data-point markers for line-like series.\nAcceptable input are:\n - `shown`: markers are always visible\n - `hidden`: markers are always hidden\n - `auto`: markers are visible for widespread data and hidden, when data is dense *(default)*",
              "sourceRange": {
                "start": {
                  "line": 216,
                  "column": 12
                },
                "end": {
                  "line": 220,
                  "column": 13
                }
              },
              "metadata": {},
              "type": "string"
            },
            {
              "name": "unit",
              "description": "Used to connect the series to an axis; if multiple series have the same “unit”, they will share axis.\nDisplayed as a title for the axis.\nIf no unit is defined, then series will be connected to the first axis.",
              "sourceRange": {
                "start": {
                  "line": 226,
                  "column": 12
                },
                "end": {
                  "line": 230,
                  "column": 13
                }
              },
              "metadata": {},
              "type": "string"
            },
            {
              "name": "stack",
              "description": "Used to group series in a different stacks.\n\"stacking\" property should be specified either for each series or in plotOptions.\nIt is recommended to place series in a single stack, when they belong to the same yAxis.",
              "sourceRange": {
                "start": {
                  "line": 236,
                  "column": 12
                },
                "end": {
                  "line": 240,
                  "column": 13
                }
              },
              "metadata": {},
              "type": "string"
            },
            {
              "name": "stacking",
              "description": "Used to group series in a stacked chart.\nCan be specified for each series separately or at chart's plotOptions for the entire chart.\nPossible values are null, \"normal\" or \"percent\".\nIf \"stack\" property is not defined, then series will be put into default stack.",
              "sourceRange": {
                "start": {
                  "line": 247,
                  "column": 12
                },
                "end": {
                  "line": 251,
                  "column": 13
                }
              },
              "metadata": {},
              "type": "string"
            },
            {
              "name": "options",
              "description": "Object with the configured options defined and used to create a series.",
              "sourceRange": {
                "start": {
                  "line": 258,
                  "column": 12
                },
                "end": {
                  "line": 260,
                  "column": 13
                }
              },
              "metadata": {},
              "type": "Object"
            },
            {
              "name": "additional-options",
              "description": "Represents additional JSON configuration.",
              "sourceRange": {
                "start": {
                  "line": 265,
                  "column": 12
                },
                "end": {
                  "line": 268,
                  "column": 13
                }
              },
              "metadata": {},
              "type": "Object"
            }
          ],
          "events": [],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": [],
          "tagname": "vaadin-chart-series"
        }
      ]
    }
  ],
  "classes": [
    {
      "description": "",
      "summary": "",
      "path": "chart-deep-merger.js",
      "properties": [],
      "methods": [],
      "staticMethods": [
        {
          "name": "__isObject",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "start": {
              "line": 6,
              "column": 2
            },
            "end": {
              "line": 8,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "item"
            }
          ]
        },
        {
          "name": "__deepMerge",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "start": {
              "line": 10,
              "column": 2
            },
            "end": {
              "line": 26,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "target"
            },
            {
              "name": "source"
            }
          ]
        }
      ],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 4,
          "column": 39
        },
        "end": {
          "line": 27,
          "column": 1
        }
      },
      "privacy": "public"
    },
    {
      "description": "",
      "summary": "",
      "path": "chart-labels-mapper.js",
      "properties": [],
      "methods": [
        {
          "name": "__isFunction",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "start": {
              "line": 26,
              "column": 2
            },
            "end": {
              "line": 28,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value"
            }
          ]
        },
        {
          "name": "__isObject",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "start": {
              "line": 30,
              "column": 2
            },
            "end": {
              "line": 32,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "item"
            }
          ]
        },
        {
          "name": "__tryPassFunction",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "start": {
              "line": 34,
              "column": 2
            },
            "end": {
              "line": 41,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value"
            }
          ]
        },
        {
          "name": "__tryPassArrayOrObject",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "start": {
              "line": 43,
              "column": 2
            },
            "end": {
              "line": 53,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value"
            }
          ]
        },
        {
          "name": "__assignMapper",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "start": {
              "line": 55,
              "column": 2
            },
            "end": {
              "line": 58,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value"
            },
            {
              "name": "type"
            }
          ]
        },
        {
          "name": "map",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 60,
              "column": 2
            },
            "end": {
              "line": 86,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "values"
            }
          ]
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 4,
          "column": 41
        },
        "end": {
          "line": 87,
          "column": 1
        }
      },
      "privacy": "public"
    },
    {
      "description": "",
      "summary": "",
      "path": "chart-deep-merger.js",
      "properties": [],
      "methods": [],
      "staticMethods": [
        {
          "name": "__isObject",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "start": {
              "line": 6,
              "column": 2
            },
            "end": {
              "line": 8,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "item"
            }
          ]
        },
        {
          "name": "__deepMerge",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "start": {
              "line": 10,
              "column": 2
            },
            "end": {
              "line": 26,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "target"
            },
            {
              "name": "source"
            }
          ]
        }
      ],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 4,
          "column": 39
        },
        "end": {
          "line": 27,
          "column": 1
        }
      },
      "privacy": "public"
    }
  ]
}
