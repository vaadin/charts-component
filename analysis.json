{
  "schema_version": "1.0.0",
  "namespaces": [
    {
      "name": "Vaadin",
      "description": "",
      "summary": "",
      "sourceRange": {
        "file": "vaadin-chart.html",
        "start": {
          "line": 1605,
          "column": 6
        },
        "end": {
          "line": 1605,
          "column": 48
        }
      },
      "elements": [
        {
          "description": "`<vaadin-chart-series>` is a Polymer 2 element for creating series for Vaadin Charts.\n\n### Basic use\n\nTo use `<vaadin-chart-series>`, simply add it inside a `<vaadin-chart>` element:\n\n```\n <vaadin-chart>\n   <vaadin-chart-series></vaadin-chart-series>\n </vaadin-chart>\n```\n\n`<vaadin-chart-series>` accepts `values` as an array attribute, so you can add it to your element definition:\n\n```\n <vaadin-chart-series values=\"[10,20,30,40,50]\"></vaadin-chart-series>\n```\n\nwhich will add a new line series, where each value will be a data point.\nLook for the Properties session to see all available attributes.\n\n### Dynamically adding and removing series\n\nYou are also able to add and remove series by using DOM API.\n\nTo create a new series, simply call `document.createElement('vaadin-chart-series')` and append it to your `<vaadin-chart>`:\n\n```\n const chart = \\* a <vaadin-chart> reference *\\\n const newSeries = document.createElement('vaadin-chart-series');\n newSeries.values = [10,20,30,40,50];\n chart.appendChild(newSeries);\n```\n\nIn order to remove it, you should use the series to be removed as a reference for the `#removeChild()` call:\n\n```\n const chart = \\* a <vaadin-chart> reference *\\\n const seriesToBeRemoved = \\* a <vaadin-chart-series> reference to remove*\\\n chart.removeChild(seriesToBeRemoved);\n```\n\n(There's an issue with `#remove()` method on Firefox, so we advice to remove the element from its parent)",
          "summary": "",
          "path": "vaadin-chart-series.html",
          "properties": [
            {
              "name": "values",
              "type": "Array",
              "description": "An array of data used by the series.\nFormat depends on the chart type and can be:\n  - An array of numerical values `[y0, y1, y2, y3,...]`\n  - An array of arrays with 2 values (`x`, `y`) `[ [x0, y0], [x1, y1], [x2, y2], ... ]`\n  - An array of objects, each one describing one point `[ {x: x0, y: y0, name: 'Point0', color: '#FF0000'}, {...}, ...]`\n\n See more in [API Site](https://api.highcharts.com/highcharts/series)\n\nNote that you should always use [Polymer API](https://www.polymer-project.org/2.0/docs/devguide/model-data#array-mutation)\nto mutate the values array in order to make the component aware of the\nchange and be able to synchronize it.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 143,
                  "column": 12
                },
                "end": {
                  "line": 146,
                  "column": 13
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "[]"
            },
            {
              "name": "valueLabels",
              "type": "ChartLabelsMapper",
              "description": "Labels for the series values. Acceptable input are:\n- An array e.g `'[\"Mon\", \"Tue\", \"Wed\", \"Thur\", \"Fri\"]'`. This maps to corresponding values by position.\n- A mapping object e.g `'{10: \"Mon\", 20: \"Tue\", 30: \"Wed\"}'`. This maps to specific values.\n- A function e.g `'e => e + \"km\"'`. This is evaluated against every value to generate its label.\n\nAny data point not covered (e.g value not present in the mapping object\nor mapping array shorter than the list of values), results in the actual value being used as the label.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 157,
                  "column": 12
                },
                "end": {
                  "line": 160,
                  "column": 13
                }
              },
              "metadata": {
                "polymer": {}
              }
            },
            {
              "name": "__labelsMapper",
              "type": "ChartLabelsMapper",
              "description": "Internal valueLabels representation so that the original property/attribute set\non valueLabels can be preserved.",
              "privacy": "private",
              "sourceRange": {
                "start": {
                  "line": 166,
                  "column": 12
                },
                "end": {
                  "line": 169,
                  "column": 13
                }
              },
              "metadata": {
                "polymer": {}
              }
            },
            {
              "name": "valueMin",
              "type": "number",
              "description": "Value-axis minimum-value.\n Sets the value to a series bound by 'unit' property.\n Otherwise sets the value to the first series.\n Undefined by default (determined from data).",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 177,
                  "column": 12
                },
                "end": {
                  "line": 181,
                  "column": 13
                }
              },
              "metadata": {
                "polymer": {
                  "observer": "\"__valueMinObserver\""
                }
              }
            },
            {
              "name": "valueMax",
              "type": "number",
              "description": "Value-axis maximum-value.\n See the 'valueMin'",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 187,
                  "column": 12
                },
                "end": {
                  "line": 191,
                  "column": 13
                }
              },
              "metadata": {
                "polymer": {
                  "observer": "\"__valueMaxObserver\""
                }
              }
            },
            {
              "name": "type",
              "type": "string",
              "description": "A string with the type of the series.\n Defaults to `'line'` in case no type is set for the chart.\nNote that `'bar'`, `'gauge'` and `'solidgauge'` should be set as default series type on `<vaadin-chart>`.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 198,
                  "column": 12
                },
                "end": {
                  "line": 202,
                  "column": 13
                }
              },
              "metadata": {
                "polymer": {
                  "observer": "\"__typeObserver\""
                }
              }
            },
            {
              "name": "title",
              "type": "string",
              "description": "The name of the series as shown in the legend, tooltip etc.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 207,
                  "column": 12
                },
                "end": {
                  "line": 211,
                  "column": 13
                }
              },
              "metadata": {
                "polymer": {
                  "observer": "\"__titleObserver\""
                }
              }
            },
            {
              "name": "markers",
              "type": "string",
              "description": "Shows/hides data-point markers for line-like series.\nAcceptable input are:\n - `shown`: markers are always visible\n - `hidden`: markers are always hidden\n - `auto`: markers are visible for widespread data and hidden, when data is dense *(default)*",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 220,
                  "column": 12
                },
                "end": {
                  "line": 224,
                  "column": 13
                }
              },
              "metadata": {
                "polymer": {
                  "observer": "\"__markersObserver\""
                }
              }
            },
            {
              "name": "unit",
              "type": "string",
              "description": "Used to connect the series to an axis; if multiple series have the same “unit”, they will share axis.\nDisplayed as a title for the axis.\nIf no unit is defined, then series will be connected to the first axis.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 230,
                  "column": 12
                },
                "end": {
                  "line": 234,
                  "column": 13
                }
              },
              "metadata": {
                "polymer": {
                  "observer": "\"__unitObserver\""
                }
              }
            },
            {
              "name": "stack",
              "type": "string",
              "description": "Used to group series in a different stacks.\n\"stacking\" property should be specified either for each series or in plotOptions.\nIt is recommended to place series in a single stack, when they belong to the same yAxis.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 240,
                  "column": 12
                },
                "end": {
                  "line": 244,
                  "column": 13
                }
              },
              "metadata": {
                "polymer": {
                  "observer": "\"__stackObserver\""
                }
              }
            },
            {
              "name": "neckPosition",
              "type": "string",
              "description": "The height of the neck, the lower part of the funnel.\nA number defines pixel width, a percentage string defines a percentage of the plot area height. Defaults to 30%.\nNote that this property only applies for \"funnel\" charts.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 250,
                  "column": 12
                },
                "end": {
                  "line": 254,
                  "column": 13
                }
              },
              "metadata": {
                "polymer": {
                  "observer": "\"__neckPositionOberserver\""
                }
              }
            },
            {
              "name": "neckWidth",
              "type": "string",
              "description": "The width of the neck, the lower part of the funnel.\nA number defines pixel width, a percentage string defines a percentage of the plot area width. Defaults to 30%.\nNote that this property only applies for \"funnel\" charts.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 260,
                  "column": 12
                },
                "end": {
                  "line": 264,
                  "column": 13
                }
              },
              "metadata": {
                "polymer": {
                  "observer": "\"__neckWidthOberserver\""
                }
              }
            },
            {
              "name": "options",
              "type": "Object",
              "description": "Object with the configured options defined and used to create a series.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 271,
                  "column": 12
                },
                "end": {
                  "line": 273,
                  "column": 13
                }
              },
              "metadata": {
                "polymer": {}
              }
            },
            {
              "name": "additionalOptions",
              "type": "Object",
              "description": "Represents additional JSON configuration.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 278,
                  "column": 12
                },
                "end": {
                  "line": 281,
                  "column": 13
                }
              },
              "metadata": {
                "polymer": {}
              }
            }
          ],
          "methods": [
            {
              "name": "disconnectedCallback",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "start": {
                  "line": 294,
                  "column": 8
                },
                "end": {
                  "line": 299,
                  "column": 9
                }
              },
              "metadata": {},
              "params": []
            },
            {
              "name": "setSeries",
              "description": "Method to attach a series object of type `Highcharts.Series`.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 305,
                  "column": 8
                },
                "end": {
                  "line": 310,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "series",
                  "description": "Object of type `Highcharts.Series`"
                }
              ]
            },
            {
              "name": "__valuesObserver",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "start": {
                  "line": 312,
                  "column": 8
                },
                "end": {
                  "line": 316,
                  "column": 9
                }
              },
              "metadata": {},
              "params": []
            },
            {
              "name": "_deserializeValue",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "start": {
                  "line": 319,
                  "column": 8
                },
                "end": {
                  "line": 325,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "value"
                },
                {
                  "name": "type"
                }
              ]
            },
            {
              "name": "_serializeValue",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "start": {
                  "line": 328,
                  "column": 8
                },
                "end": {
                  "line": 333,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "value"
                }
              ]
            },
            {
              "name": "__additionalOptionsObserver",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "start": {
                  "line": 335,
                  "column": 8
                },
                "end": {
                  "line": 339,
                  "column": 9
                }
              },
              "metadata": {},
              "params": []
            },
            {
              "name": "__labelsObserver",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "start": {
                  "line": 341,
                  "column": 8
                },
                "end": {
                  "line": 352,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "changeRecord"
                },
                {
                  "name": "values"
                }
              ]
            },
            {
              "name": "__computeData",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "start": {
                  "line": 354,
                  "column": 8
                },
                "end": {
                  "line": 356,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "values"
                }
              ]
            },
            {
              "name": "__valueMinObserver",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "start": {
                  "line": 358,
                  "column": 8
                },
                "end": {
                  "line": 373,
                  "column": 9
                }
              },
              "metadata": {},
              "params": []
            },
            {
              "name": "__valueMaxObserver",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "start": {
                  "line": 375,
                  "column": 8
                },
                "end": {
                  "line": 390,
                  "column": 9
                }
              },
              "metadata": {},
              "params": []
            },
            {
              "name": "__typeObserver",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "start": {
                  "line": 392,
                  "column": 8
                },
                "end": {
                  "line": 398,
                  "column": 9
                }
              },
              "metadata": {},
              "params": []
            },
            {
              "name": "__titleObserver",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "start": {
                  "line": 400,
                  "column": 8
                },
                "end": {
                  "line": 406,
                  "column": 9
                }
              },
              "metadata": {},
              "params": []
            },
            {
              "name": "__stackObserver",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "start": {
                  "line": 408,
                  "column": 8
                },
                "end": {
                  "line": 416,
                  "column": 9
                }
              },
              "metadata": {},
              "params": []
            },
            {
              "name": "__neckPositionOberserver",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "start": {
                  "line": 418,
                  "column": 8
                },
                "end": {
                  "line": 425,
                  "column": 9
                }
              },
              "metadata": {},
              "params": []
            },
            {
              "name": "__neckWidthOberserver",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "start": {
                  "line": 427,
                  "column": 8
                },
                "end": {
                  "line": 434,
                  "column": 9
                }
              },
              "metadata": {},
              "params": []
            },
            {
              "name": "__unitObserver",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "start": {
                  "line": 436,
                  "column": 8
                },
                "end": {
                  "line": 451,
                  "column": 9
                }
              },
              "metadata": {},
              "params": []
            },
            {
              "name": "__hasSeriesConfig",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "start": {
                  "line": 453,
                  "column": 8
                },
                "end": {
                  "line": 455,
                  "column": 9
                }
              },
              "metadata": {},
              "params": []
            },
            {
              "name": "__isMarkersValid",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "start": {
                  "line": 457,
                  "column": 8
                },
                "end": {
                  "line": 463,
                  "column": 9
                }
              },
              "metadata": {},
              "params": []
            },
            {
              "name": "__markersObserver",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "start": {
                  "line": 465,
                  "column": 8
                },
                "end": {
                  "line": 475,
                  "column": 9
                }
              },
              "metadata": {},
              "params": []
            },
            {
              "name": "__showWarn",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "start": {
                  "line": 495,
                  "column": 8
                },
                "end": {
                  "line": 497,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "propertyName"
                },
                {
                  "name": "acceptedValues"
                }
              ]
            }
          ],
          "staticMethods": [],
          "demos": [
            {
              "url": "demo/index.html",
              "description": ""
            }
          ],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 74,
              "column": 6
            },
            "end": {
              "line": 498,
              "column": 7
            }
          },
          "privacy": "public",
          "superclass": "HTMLElement",
          "name": "Vaadin.ChartSeriesElement",
          "attributes": [
            {
              "name": "values",
              "description": "An array of data used by the series.\nFormat depends on the chart type and can be:\n  - An array of numerical values `[y0, y1, y2, y3,...]`\n  - An array of arrays with 2 values (`x`, `y`) `[ [x0, y0], [x1, y1], [x2, y2], ... ]`\n  - An array of objects, each one describing one point `[ {x: x0, y: y0, name: 'Point0', color: '#FF0000'}, {...}, ...]`\n\n See more in [API Site](https://api.highcharts.com/highcharts/series)\n\nNote that you should always use [Polymer API](https://www.polymer-project.org/2.0/docs/devguide/model-data#array-mutation)\nto mutate the values array in order to make the component aware of the\nchange and be able to synchronize it.",
              "sourceRange": {
                "start": {
                  "line": 143,
                  "column": 12
                },
                "end": {
                  "line": 146,
                  "column": 13
                }
              },
              "metadata": {},
              "type": "Array"
            },
            {
              "name": "value-labels",
              "description": "Labels for the series values. Acceptable input are:\n- An array e.g `'[\"Mon\", \"Tue\", \"Wed\", \"Thur\", \"Fri\"]'`. This maps to corresponding values by position.\n- A mapping object e.g `'{10: \"Mon\", 20: \"Tue\", 30: \"Wed\"}'`. This maps to specific values.\n- A function e.g `'e => e + \"km\"'`. This is evaluated against every value to generate its label.\n\nAny data point not covered (e.g value not present in the mapping object\nor mapping array shorter than the list of values), results in the actual value being used as the label.",
              "sourceRange": {
                "start": {
                  "line": 157,
                  "column": 12
                },
                "end": {
                  "line": 160,
                  "column": 13
                }
              },
              "metadata": {},
              "type": "ChartLabelsMapper"
            },
            {
              "name": "value-min",
              "description": "Value-axis minimum-value.\n Sets the value to a series bound by 'unit' property.\n Otherwise sets the value to the first series.\n Undefined by default (determined from data).",
              "sourceRange": {
                "start": {
                  "line": 177,
                  "column": 12
                },
                "end": {
                  "line": 181,
                  "column": 13
                }
              },
              "metadata": {},
              "type": "number"
            },
            {
              "name": "value-max",
              "description": "Value-axis maximum-value.\n See the 'valueMin'",
              "sourceRange": {
                "start": {
                  "line": 187,
                  "column": 12
                },
                "end": {
                  "line": 191,
                  "column": 13
                }
              },
              "metadata": {},
              "type": "number"
            },
            {
              "name": "type",
              "description": "A string with the type of the series.\n Defaults to `'line'` in case no type is set for the chart.\nNote that `'bar'`, `'gauge'` and `'solidgauge'` should be set as default series type on `<vaadin-chart>`.",
              "sourceRange": {
                "start": {
                  "line": 198,
                  "column": 12
                },
                "end": {
                  "line": 202,
                  "column": 13
                }
              },
              "metadata": {},
              "type": "string"
            },
            {
              "name": "title",
              "description": "The name of the series as shown in the legend, tooltip etc.",
              "sourceRange": {
                "start": {
                  "line": 207,
                  "column": 12
                },
                "end": {
                  "line": 211,
                  "column": 13
                }
              },
              "metadata": {},
              "type": "string"
            },
            {
              "name": "markers",
              "description": "Shows/hides data-point markers for line-like series.\nAcceptable input are:\n - `shown`: markers are always visible\n - `hidden`: markers are always hidden\n - `auto`: markers are visible for widespread data and hidden, when data is dense *(default)*",
              "sourceRange": {
                "start": {
                  "line": 220,
                  "column": 12
                },
                "end": {
                  "line": 224,
                  "column": 13
                }
              },
              "metadata": {},
              "type": "string"
            },
            {
              "name": "unit",
              "description": "Used to connect the series to an axis; if multiple series have the same “unit”, they will share axis.\nDisplayed as a title for the axis.\nIf no unit is defined, then series will be connected to the first axis.",
              "sourceRange": {
                "start": {
                  "line": 230,
                  "column": 12
                },
                "end": {
                  "line": 234,
                  "column": 13
                }
              },
              "metadata": {},
              "type": "string"
            },
            {
              "name": "stack",
              "description": "Used to group series in a different stacks.\n\"stacking\" property should be specified either for each series or in plotOptions.\nIt is recommended to place series in a single stack, when they belong to the same yAxis.",
              "sourceRange": {
                "start": {
                  "line": 240,
                  "column": 12
                },
                "end": {
                  "line": 244,
                  "column": 13
                }
              },
              "metadata": {},
              "type": "string"
            },
            {
              "name": "neck-position",
              "description": "The height of the neck, the lower part of the funnel.\nA number defines pixel width, a percentage string defines a percentage of the plot area height. Defaults to 30%.\nNote that this property only applies for \"funnel\" charts.",
              "sourceRange": {
                "start": {
                  "line": 250,
                  "column": 12
                },
                "end": {
                  "line": 254,
                  "column": 13
                }
              },
              "metadata": {},
              "type": "string"
            },
            {
              "name": "neck-width",
              "description": "The width of the neck, the lower part of the funnel.\nA number defines pixel width, a percentage string defines a percentage of the plot area width. Defaults to 30%.\nNote that this property only applies for \"funnel\" charts.",
              "sourceRange": {
                "start": {
                  "line": 260,
                  "column": 12
                },
                "end": {
                  "line": 264,
                  "column": 13
                }
              },
              "metadata": {},
              "type": "string"
            },
            {
              "name": "options",
              "description": "Object with the configured options defined and used to create a series.",
              "sourceRange": {
                "start": {
                  "line": 271,
                  "column": 12
                },
                "end": {
                  "line": 273,
                  "column": 13
                }
              },
              "metadata": {},
              "type": "Object"
            },
            {
              "name": "additional-options",
              "description": "Represents additional JSON configuration.",
              "sourceRange": {
                "start": {
                  "line": 278,
                  "column": 12
                },
                "end": {
                  "line": 281,
                  "column": 13
                }
              },
              "metadata": {},
              "type": "Object"
            }
          ],
          "events": [],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": [],
          "tagname": "vaadin-chart-series"
        },
        {
          "description": "`<vaadin-chart>` is a Polymer 2 element for creating high quality charts.\n\n### Quick Start\n\n1. Create a Polymer application using [Polymer CLI](https://www.polymer-project.org/2.0/docs/tools/polymer-cli)\n```\nmkdir my-app\ncd my-app\npolymer init\nselect `polymer-2-application`\n```\n1. Install Vaadin Charts\n```\nbower install --save vaadin-charts#6.1.0-alpha7\n```\n1. Import `<vaadin-chart>` to your app\nEdit the file `src/my-app/my-app.html` and add the following snipped before the `<dom-module>` tag\n```html\n<link rel=\"import\" href=\"../../bower_components/vaadin-charts/vaadin-chart.html\">\n```\n1. Add your first `<vaadin-chart>`\nAlso in `my-app.html` add the following snippet before the `</template>` closing tag\n```html\n<vaadin-chart></vaadin-chart>\n```\n1. Run your app with:\n```\npolymer serve --open\n```\nCongratulations! You have your first Vaadin Chart setup.\n\n### Basic use\n\nNow that we covered the basic steps to create an empty chart, let us show how you can configure it.\n\nThere are two ways of configuring your `<vaadin-chart>` element: **HTML API**, **JS API** and **JSON API**.\nNote that you can make use of all APIs in your element.\n\n#### Configuring your chart using HTML API\n\n`vaadin-chart` has a set of attributes to make it easier for you to customize your chart.\nUsing as a base the project created with in Quick Start:\n\n```html\n <vaadin-chart title=\"The chart title\" subtitle=\"The chart subtitle\">\n   <vaadin-chart-series\n         type=\"column\"\n         title=\"The series title\"\n         values=\"[10,20,30]\">\n   </vaadin-chart-series>\n </vaadin-chart>\n```\n\n> Note that while you can set type for each series individually, for some types, such as `'bar'`, `'gauge'` and `'solidgauge'`, you\n> have to set it as the default series type on `<vaadin-chart>` in order to work properly.\n\n#### Configuring your chart using JS API\n\nUsing as a base the project created with in Quick Start\n\nDo the following changes in `my-app.html`\n\n1. Set and id for the `<vaadin-chart>` in the template\n```html\n    <vaadin-chart id=\"mychart\"></vaadin-chart>\n```\n1. Add a function that uses `configuration` property (JS Api) to set chart title, categories and data\n```\ninitChartWithJSApi() {\n    Polymer.RenderStatus.beforeNextRender(this, () => {\n       const configuration = this.$.mychart.configuration;\n       configuration.setTitle({ text: 'The chart title' });\n       // By default there is one x axis, it is referenced by configuration.xAxis[0].\n       configuration.xAxis[0].setCategories(['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']);\n       configuration.addSeries({\n           type: 'column',\n           data: [29.9, 71.5, 106.4, 129.2, 144.0, 176.0, 135.6, 148.5, 216.4, 194.1, 95.6, 54.4]\n       });\n    });\n}\n```\n1. Call that function from connectedCallback (when the element is added to a document)\n```\nconnectedCallback() {\n    super.connectedCallback();\n    this.initChartWithJSApi();\n}\n```\n1. And finally run your app with:\n```\npolymer serve --open\n```\n\n\n#### Configuring your chart using JS JSON API\n\nJS JSON API is a simple alternative to the JS API.\n\nUsing as a base the project created with in Quick Start\n\nDo the following changes in `my-app.html`\n\n1. Set and id for the `<vaadin-chart>` in the template\n```html\n    <vaadin-chart id=\"mychart\"></vaadin-chart>\n```\n1. Add a function that uses `update` method (JS JSON Api) to set chart title, categories and data\n```\ninitChartWithJSJSONApi() {\n    this.$.mychart.update({\n      title: {\n        text: 'The chart title'\n      },\n      subtitle: {\n        text: 'Subtitle'\n      },\n      xAxis: {\n        categories: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']\n      },\n      series: [{\n        type: 'column',\n        data: [29.9, 71.5, 106.4, 129.2, 144.0, 176.0, 135.6, 148.5, 216.4, 194.1, 95.6, 54.4]\n      }]\n    });\n}\n```\n1. Call that function from connectedCallback (when the element is added to a document)\n```\nconnectedCallback() {\n    super.connectedCallback();\n    this.initChartWithJSJSONApi();\n}\n```\n1. And finally run your app with:\n```\npolymer serve --open\n```\n\nIt should be noted that chart style customization cannot be done via the JS or JSON API.\nStyling properties in the JSON configuration will be ignored. The following section discusses chart styling.\n\n\n### CSS Styling\nChart appearance is primarily controlled by CSS style rules.\nA comprehensive list of the supported style classes can be found at\nhttps://www.highcharts.com/docs/chart-design-and-style/style-by-css\n\n\n### Steps for styling a chart\n\n1. Create a theme file (for example `shared-styles.html`). The theme's dom-module must declare `theme-for=vaadin-chart`.\n2. Import `vaadin-chart-default-theme.html` and declare `include=\"vaadin-chart-default-theme\"`\non the theme module's style tag to customize Chart's default theme. If there are multiple theme\nmodules *only one* of them should declare this `include`.\n3. Specify the desired CSS rules in the theme file.\n4. If multiple charts are present, each one can be specifically targeted using the host selector e.g `:host(.my-chart-class)`.\n5. Import the theme file.\n\n\n### Example: Two Charts with a Red Title but only one with a Blue Subtitle\n\n```\n<link rel=\"import\" href=\"shared-styles.html\">\n...\n<vaadin-chart title=\"Red Title\" subtitle=\"Not Styled\">\n  <vaadin-chart-series values=\"[19,12,9,24,5]\"></vaadin-chart-series>\n</vaadin-chart>\n\n<vaadin-chart class=\"blue-subtitle\" title=\"Red Title\" subtitle=\"Blue Subtitle\">\n  <vaadin-chart-series values=\"[19,12,9,24,5]\"></vaadin-chart-series>\n</vaadin-chart>\n```\n\nshared-styles.html\n\n```\n<link rel=\"import\" href=\"../bower_components/vaadin-charts/vaadin-chart-default-theme.html\">\n\n<dom-module id=\"css-style-example\" theme-for=\"vaadin-chart\">\n   <template>\n     <style include=\"vaadin-chart-default-theme\">\n       .highcharts-title {\n         fill: red;\n         font-size: xx-large;\n       }\n\n       :host(.blue-subtitle) .highcharts-subtitle {\n         fill: blue;\n       }\n     </style>\n   </template>\n</dom-module>\n```\n\n### Setting colors\n\nAlthough charts can be styled as described above, there is a simpler way for setting colors.\nColors can be set using CSS custom properties `--vaadin-charts-color-{n}` (where `n` goes from `0 - 9`).\n\nFor example `--vaadin-charts-color-0` sets the color of the first series on a chart.\n\n### Validating your License\nAfter one day using Vaadin Charts in a development environment you will see a pop-up that asks you\nto validate your license by signing in to vaadin.com.",
          "summary": "",
          "path": "vaadin-chart.html",
          "properties": [
            {
              "name": "configuration",
              "type": "Object",
              "description": "Configuration object that exposes the JS Api to configure the chart.\n\nMost important methods are:\n- `addSeries (Object options, [Boolean redraw], [Mixed animation])`\n- `addAxis (Object options, [Boolean isX], [Boolean redraw], [Mixed animation])`\n- `setTitle (Object title, object subtitle, Boolean redraw)`\n\nMost important properties are:\n- `configuration.series`: An array of the chart's series. Detailed API for Series object is\n    available in [API Site](http://api.highcharts.com/class-reference/Highcharts.Series)\n- `configuration.xAxis`: An array of the chart's x axes. Detailed API for Axis object is\n    available in [API Site](http://api.highcharts.com/class-reference/Highcharts.Axis)\n- `configuration.yAxis`: An array of the chart's y axes. Detailed API for Axis object is\n    available in [API Site](http://api.highcharts.com/class-reference/Highcharts.Axis)\n- `configuration.title`: The chart title.\n\nFor detailed documentation of available API check the [API site](http://api.highcharts.com/class-reference/classes.list)",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 302,
                  "column": 12
                },
                "end": {
                  "line": 302,
                  "column": 33
                }
              },
              "metadata": {
                "polymer": {}
              }
            },
            {
              "name": "categories",
              "type": "Object",
              "description": "If categories are present names are used instead of numbers for the category axis.\nThe format of categories can be an `Array` with a list of categories, such as `['2010', '2011', '2012']`\nor a mapping `Object`, like `{0:'1',9:'Target (10)', 15: 'Max'}`.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 309,
                  "column": 12
                },
                "end": {
                  "line": 313,
                  "column": 13
                }
              },
              "metadata": {
                "polymer": {
                  "observer": "\"__updateCategories\""
                }
              }
            },
            {
              "name": "categoryMax",
              "type": "number",
              "description": "Category-axis maximum value. Defaults to `undefined`.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 318,
                  "column": 12
                },
                "end": {
                  "line": 322,
                  "column": 13
                }
              },
              "metadata": {
                "polymer": {
                  "observer": "\"__updateCategoryMax\""
                }
              }
            },
            {
              "name": "categoryMin",
              "type": "number",
              "description": "Category-axis minimum value. Defaults to `undefined`.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 327,
                  "column": 12
                },
                "end": {
                  "line": 331,
                  "column": 13
                }
              },
              "metadata": {
                "polymer": {
                  "observer": "\"__updateCategoryMin\""
                }
              }
            },
            {
              "name": "categoryPosition",
              "type": "string",
              "description": "The position of the category axis. Acceptable values are `left`, `right`, `top` and `bottom`\nexcept for bar charts which only accept `left` and `right`.\nWith the default value, charts appear as though they have `category-position=\"bottom\"`\nexcept for bar charts that appear as though they have `category-position=\"left\"`.\n\nDefaults to `undefined`",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 341,
                  "column": 12
                },
                "end": {
                  "line": 345,
                  "column": 13
                }
              },
              "metadata": {
                "polymer": {
                  "observer": "\"__updateCategoryPosition\""
                }
              }
            },
            {
              "name": "noLegend",
              "type": "boolean",
              "description": "Specifies whether to hide legend or show.\nLegend configuration can be set up via additionalOptions property",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 351,
                  "column": 12
                },
                "end": {
                  "line": 355,
                  "column": 13
                }
              },
              "metadata": {
                "polymer": {
                  "observer": "\"__hideLegend\""
                }
              }
            },
            {
              "name": "stacking",
              "type": "string",
              "description": "Specifies how series are stacked on top of each other.\nPossible values are null, \"normal\" or \"percent\".\nIf \"stack\" property is not defined on the vaadin-chart-series elements, then series will be put into\nthe default stack.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 363,
                  "column": 12
                },
                "end": {
                  "line": 367,
                  "column": 13
                }
              },
              "metadata": {
                "polymer": {
                  "observer": "\"__stackingObserver\""
                }
              }
            },
            {
              "name": "timeline",
              "type": "boolean",
              "description": "Specifies whether the chart is a normal chart or a timeline chart.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 372,
                  "column": 12
                },
                "end": {
                  "line": 375,
                  "column": 13
                }
              },
              "metadata": {
                "polymer": {}
              }
            },
            {
              "name": "title",
              "type": "string",
              "description": "Represents the title of the chart.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 380,
                  "column": 12
                },
                "end": {
                  "line": 384,
                  "column": 13
                }
              },
              "metadata": {
                "polymer": {
                  "observer": "\"__updateTitle\""
                }
              }
            },
            {
              "name": "tooltip",
              "type": "boolean",
              "description": "Whether or not to show tooltip when hovering data points.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 389,
                  "column": 12
                },
                "end": {
                  "line": 393,
                  "column": 13
                }
              },
              "metadata": {
                "polymer": {
                  "observer": "\"__tooltipObserver\""
                }
              }
            },
            {
              "name": "type",
              "type": "string",
              "description": "Sets the default series type of the chart.\nNote that `'bar'`, `'gauge'` and `'solidgauge'` should be set as default series type.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 399,
                  "column": 12
                },
                "end": {
                  "line": 403,
                  "column": 13
                }
              },
              "metadata": {
                "polymer": {
                  "observer": "\"__updateType\""
                }
              }
            },
            {
              "name": "subtitle",
              "type": "string",
              "description": "Represents the subtitle of the chart.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 408,
                  "column": 12
                },
                "end": {
                  "line": 412,
                  "column": 13
                }
              },
              "metadata": {
                "polymer": {
                  "observer": "\"__updateSubtitle\""
                }
              }
            },
            {
              "name": "chart3d",
              "type": "boolean",
              "description": "Specifies whether to show chart in 3 or in 2 dimensions.\nSome display angles are added by default to the \"chart.options3d\" (`{alpha: 15, beta: 15, depth: 50}`).\n3D display options can be modified via `additionalOptions`.\nThe thickness of a Pie chart can be set on `additionalOptions` through `plotOptions.pie.depth`.\n3D is supported by Bar, Column, Pie and Scatter3D charts.\nMore info available at [Highcharts](https://www.highcharts.com/docs/chart-concepts/3d-charts).",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 422,
                  "column": 12
                },
                "end": {
                  "line": 426,
                  "column": 13
                }
              },
              "metadata": {
                "polymer": {
                  "observer": "\"__chart3dObserver\""
                }
              }
            },
            {
              "name": "emptyText",
              "type": "string",
              "description": "Specifies the message displayed on a chart without displayable data.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 431,
                  "column": 12
                },
                "end": {
                  "line": 436,
                  "column": 13
                }
              },
              "metadata": {
                "polymer": {
                  "observer": "\"__emptyTextObserver\""
                }
              },
              "defaultValue": "\" \""
            },
            {
              "name": "additionalOptions",
              "type": "Object",
              "description": "Represents additional JSON configuration.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 441,
                  "column": 12
                },
                "end": {
                  "line": 444,
                  "column": 13
                }
              },
              "metadata": {
                "polymer": {}
              }
            },
            {
              "name": "polar",
              "type": "boolean",
              "description": "When present, cartesian charts like line, spline, area and column are transformed\ninto the polar coordinate system.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 450,
                  "column": 12
                },
                "end": {
                  "line": 454,
                  "column": 13
                }
              },
              "metadata": {
                "polymer": {
                  "observer": "\"__polarObserver\""
                }
              }
            }
          ],
          "methods": [
            {
              "name": "connectedCallback",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "start": {
                  "line": 501,
                  "column": 8
                },
                "end": {
                  "line": 520,
                  "column": 9
                }
              },
              "metadata": {},
              "params": []
            },
            {
              "name": "__reflow",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "start": {
                  "line": 851,
                  "column": 8
                },
                "end": {
                  "line": 858,
                  "column": 9
                }
              },
              "metadata": {},
              "params": []
            },
            {
              "name": "__mutationCallback",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "start": {
                  "line": 860,
                  "column": 8
                },
                "end": {
                  "line": 867,
                  "column": 9
                }
              },
              "metadata": {},
              "params": []
            },
            {
              "name": "__addChildObserver",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "start": {
                  "line": 869,
                  "column": 8
                },
                "end": {
                  "line": 876,
                  "column": 9
                }
              },
              "metadata": {},
              "params": []
            },
            {
              "name": "__filterSeriesNodes",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "start": {
                  "line": 878,
                  "column": 8
                },
                "end": {
                  "line": 880,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "node"
                }
              ]
            },
            {
              "name": "__addSeries",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "start": {
                  "line": 882,
                  "column": 8
                },
                "end": {
                  "line": 913,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "series"
                }
              ]
            },
            {
              "name": "__setYAxisProps",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "start": {
                  "line": 915,
                  "column": 8
                },
                "end": {
                  "line": 921,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "yAxes"
                },
                {
                  "name": "yAxisId"
                },
                {
                  "name": "props"
                }
              ]
            },
            {
              "name": "__isSeriesEmpty",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "start": {
                  "line": 923,
                  "column": 8
                },
                "end": {
                  "line": 925,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "series"
                }
              ]
            },
            {
              "name": "__cleanupAfterSeriesRemoved",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "start": {
                  "line": 927,
                  "column": 8
                },
                "end": {
                  "line": 943,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "series"
                }
              ]
            },
            {
              "name": "__initChart",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "start": {
                  "line": 945,
                  "column": 8
                },
                "end": {
                  "line": 954,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "options"
                }
              ]
            },
            {
              "name": "disconnectedCalllback",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "start": {
                  "line": 957,
                  "column": 8
                },
                "end": {
                  "line": 961,
                  "column": 9
                }
              },
              "metadata": {},
              "params": []
            },
            {
              "name": "__getAxis",
              "description": "Search for axis with given `id`.",
              "privacy": "private",
              "sourceRange": {
                "start": {
                  "line": 969,
                  "column": 8
                },
                "end": {
                  "line": 976,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "id",
                  "type": "String",
                  "description": "contains the id that will be searched"
                },
                {
                  "name": "isXAxis",
                  "type": "Boolean",
                  "description": "indicates if it will remove x or y axes. Defaults to `false`."
                }
              ]
            },
            {
              "name": "__addAxis",
              "description": "Add an axis with given options",
              "privacy": "private",
              "sourceRange": {
                "start": {
                  "line": 984,
                  "column": 8
                },
                "end": {
                  "line": 989,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "options",
                  "type": "Object",
                  "description": "axis options"
                },
                {
                  "name": "isXAxis",
                  "type": "Boolean",
                  "description": "indicates if axis is X (`true`) or Y (`false`). Defaults to `false`."
                }
              ]
            },
            {
              "name": "__removeAxisIfEmpty",
              "description": "Iterates over axes (y or x) and removes whenever it doesn't contain any series and was created for unit",
              "privacy": "private",
              "sourceRange": {
                "start": {
                  "line": 996,
                  "column": 8
                },
                "end": {
                  "line": 1006,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "isXAxis",
                  "type": "Boolean",
                  "description": "indicates if it will remove x or y axes. Defaults to `false`."
                }
              ]
            },
            {
              "name": "update",
              "description": "Update the chart configuration.\nThis JSON API provides a simple single-argument alternative to the configuration property.\n\nStyling properties specified in this configuration will be ignored. To learn about chart styling\nplease see the CSS Styling section above.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 1043,
                  "column": 8
                },
                "end": {
                  "line": 1081,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "jsonConfiguration",
                  "type": "Object",
                  "description": "Object chart configuration. Most important properties are:\n\n- chart `Object` with options regarding the chart area and plot area as well as general chart options.\n   Detailed API for chart object is available in [API Site](http://api.highcharts.com/highcharts/chart)\n- credits `Object` with options regarding the chart area and plot area as well as general chart options.\n   Detailed API for credits object is available in [API Site](http://api.highcharts.com/highcharts/credits)\n- labels `Object[]` with HTML labels that can be positioned anywhere in the chart area\n   Detailed API for labels object is available in [API Site](http://api.highcharts.com/highcharts/labels)\n- plotOptions `Object` wrapper for config objects for each series type.\n   Detailed API for plotOptions object is available in [API Site](http://api.highcharts.com/highcharts/plotOptions)\n- series `Object[]` the actual series to append to the chart.\n   Detailed API for series object is available in [API Site](http://api.highcharts.com/highcharts/series)\n- subtitle `Object` the chart's subtitle.\n   Detailed API for subtitle object is available in [API Site](http://api.highcharts.com/highcharts/subtitle)\n- title `Object` the chart's main title.\n   Detailed API for title object is available in [API Site](http://api.highcharts.com/highcharts/title)\n- tooltip `Object` Options for the tooltip that appears when the user hovers over a series or point.\n   Detailed API for tooltip object is available in [API Site](http://api.highcharts.com/highcharts/tooltip)\n- xAxis `Object[]` The X axis or category axis. Normally this is the horizontal axis.\n   Detailed API for xAxis object is available in [API Site](http://api.highcharts.com/highcharts/xAxis)\n- yAxis `Object[]` The Y axis or value axis. Normally this is the vertical axis.\n   Detailed API for yAxis object is available in [API Site](http://api.highcharts.com/highcharts/yAxis)\n- zAxis `Object[]` The Z axis or depth axis for 3D plots.\n   Detailed API for zAxis object is available in [API Site](http://api.highcharts.com/highcharts/zAxis)"
                },
                {
                  "name": "resetConfiguration",
                  "type": "Boolean",
                  "description": "Optional boolean that should be set to true if no other chart configuration was set before or\n   if existing configuration should be discarded."
                }
              ]
            },
            {
              "name": "__makeConfigurationBuffer",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "start": {
                  "line": 1083,
                  "column": 8
                },
                "end": {
                  "line": 1092,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "target"
                },
                {
                  "name": "source"
                }
              ]
            },
            {
              "name": "__mergeConfigurationArray",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "start": {
                  "line": 1094,
                  "column": 8
                },
                "end": {
                  "line": 1109,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "target"
                },
                {
                  "name": "configuration"
                },
                {
                  "name": "entry"
                }
              ]
            },
            {
              "name": "__inflateFunctions",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "start": {
                  "line": 1111,
                  "column": 8
                },
                "end": {
                  "line": 1127,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "jsonConfiguration"
                }
              ]
            },
            {
              "name": "__initEventsListeners",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "start": {
                  "line": 1129,
                  "column": 8
                },
                "end": {
                  "line": 1135,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "configuration"
                }
              ]
            },
            {
              "name": "__initChartEventsListeners",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "start": {
                  "line": 1137,
                  "column": 8
                },
                "end": {
                  "line": 1139,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "configuration"
                }
              ]
            },
            {
              "name": "__initSeriesEventsListeners",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "start": {
                  "line": 1141,
                  "column": 8
                },
                "end": {
                  "line": 1143,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "configuration"
                }
              ]
            },
            {
              "name": "__initPointsEventsListeners",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "start": {
                  "line": 1145,
                  "column": 8
                },
                "end": {
                  "line": 1147,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "configuration"
                }
              ]
            },
            {
              "name": "__initAxisEventsListeners",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "start": {
                  "line": 1149,
                  "column": 8
                },
                "end": {
                  "line": 1165,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "configuration"
                },
                {
                  "name": "isXAxis"
                }
              ]
            },
            {
              "name": "__createEventListeners",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "start": {
                  "line": 1167,
                  "column": 8
                },
                "end": {
                  "line": 1218,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "eventList"
                },
                {
                  "name": "configuration"
                },
                {
                  "name": "pathToAdd"
                },
                {
                  "name": "eventType"
                }
              ]
            },
            {
              "name": "__ensureObjectPath",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "start": {
                  "line": 1220,
                  "column": 8
                },
                "end": {
                  "line": 1230,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "object"
                },
                {
                  "name": "path"
                }
              ]
            },
            {
              "name": "__updateOrAddCredits",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "start": {
                  "line": 1232,
                  "column": 8
                },
                "end": {
                  "line": 1238,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "credits"
                }
              ]
            },
            {
              "name": "__updateOrAddAxes",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "start": {
                  "line": 1240,
                  "column": 8
                },
                "end": {
                  "line": 1253,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "axes"
                },
                {
                  "name": "isX"
                }
              ]
            },
            {
              "name": "__updateOrAddSeries",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "start": {
                  "line": 1255,
                  "column": 8
                },
                "end": {
                  "line": 1263,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "series"
                }
              ]
            },
            {
              "name": "__updateOrAddSeriesInstance",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "start": {
                  "line": 1265,
                  "column": 8
                },
                "end": {
                  "line": 1272,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "seriesOptions"
                },
                {
                  "name": "position"
                }
              ]
            },
            {
              "name": "__updateCategories",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "start": {
                  "line": 1274,
                  "column": 8
                },
                "end": {
                  "line": 1282,
                  "column": 9
                }
              },
              "metadata": {},
              "params": []
            },
            {
              "name": "__updateCategoryMax",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "start": {
                  "line": 1284,
                  "column": 8
                },
                "end": {
                  "line": 1297,
                  "column": 9
                }
              },
              "metadata": {},
              "params": []
            },
            {
              "name": "__updateCategoryMin",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "start": {
                  "line": 1299,
                  "column": 8
                },
                "end": {
                  "line": 1312,
                  "column": 9
                }
              },
              "metadata": {},
              "params": []
            },
            {
              "name": "__shouldInvert",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "start": {
                  "line": 1314,
                  "column": 8
                },
                "end": {
                  "line": 1325,
                  "column": 9
                }
              },
              "metadata": {},
              "params": []
            },
            {
              "name": "__shouldFlipOpposite",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "start": {
                  "line": 1327,
                  "column": 8
                },
                "end": {
                  "line": 1331,
                  "column": 9
                }
              },
              "metadata": {},
              "params": []
            },
            {
              "name": "__updateCategoryPosition",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "start": {
                  "line": 1333,
                  "column": 8
                },
                "end": {
                  "line": 1354,
                  "column": 9
                }
              },
              "metadata": {},
              "params": []
            },
            {
              "name": "__hideLegend",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "start": {
                  "line": 1356,
                  "column": 8
                },
                "end": {
                  "line": 1366,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "newValue"
                }
              ]
            },
            {
              "name": "__updateTitle",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "start": {
                  "line": 1368,
                  "column": 8
                },
                "end": {
                  "line": 1376,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "newValue"
                }
              ]
            },
            {
              "name": "__tooltipObserver",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "start": {
                  "line": 1378,
                  "column": 8
                },
                "end": {
                  "line": 1384,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "newValue"
                }
              ]
            },
            {
              "name": "__updateType",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "start": {
                  "line": 1386,
                  "column": 8
                },
                "end": {
                  "line": 1398,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "newValue"
                }
              ]
            },
            {
              "name": "__updateSubtitle",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "start": {
                  "line": 1400,
                  "column": 8
                },
                "end": {
                  "line": 1412,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "newValue"
                }
              ]
            },
            {
              "name": "__updateAdditionalOptions",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "start": {
                  "line": 1414,
                  "column": 8
                },
                "end": {
                  "line": 1418,
                  "column": 9
                }
              },
              "metadata": {},
              "params": []
            },
            {
              "name": "__isStackingValid",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "start": {
                  "line": 1420,
                  "column": 8
                },
                "end": {
                  "line": 1426,
                  "column": 9
                }
              },
              "metadata": {},
              "params": []
            },
            {
              "name": "__stackingObserver",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "start": {
                  "line": 1428,
                  "column": 8
                },
                "end": {
                  "line": 1445,
                  "column": 9
                }
              },
              "metadata": {},
              "params": []
            },
            {
              "name": "__chart3dObserver",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "start": {
                  "line": 1447,
                  "column": 8
                },
                "end": {
                  "line": 1478,
                  "column": 9
                }
              },
              "metadata": {},
              "params": []
            },
            {
              "name": "__polarObserver",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "start": {
                  "line": 1480,
                  "column": 8
                },
                "end": {
                  "line": 1490,
                  "column": 9
                }
              },
              "metadata": {},
              "params": []
            },
            {
              "name": "__emptyTextObserver",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "start": {
                  "line": 1492,
                  "column": 8
                },
                "end": {
                  "line": 1504,
                  "column": 9
                }
              },
              "metadata": {},
              "params": []
            },
            {
              "name": "__callChartFunction",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "start": {
                  "line": 1506,
                  "column": 8
                },
                "end": {
                  "line": 1514,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "functionName"
                }
              ]
            },
            {
              "name": "__callSeriesFunction",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "start": {
                  "line": 1516,
                  "column": 8
                },
                "end": {
                  "line": 1525,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "functionName"
                },
                {
                  "name": "seriesIndex"
                }
              ]
            },
            {
              "name": "__callAxisFunction",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "start": {
                  "line": 1527,
                  "column": 8
                },
                "end": {
                  "line": 1560,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "functionName"
                },
                {
                  "name": "axisCategory"
                },
                {
                  "name": "axisIndex"
                }
              ]
            },
            {
              "name": "__callPointFunction",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "start": {
                  "line": 1562,
                  "column": 8
                },
                "end": {
                  "line": 1571,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "functionName"
                },
                {
                  "name": "seriesIndex"
                },
                {
                  "name": "pointIndex"
                }
              ]
            },
            {
              "name": "__updateStyles",
              "description": "Updates chart container and current chart style property depending on flex status",
              "privacy": "private",
              "sourceRange": {
                "start": {
                  "line": 1576,
                  "column": 8
                },
                "end": {
                  "line": 1597,
                  "column": 9
                }
              },
              "metadata": {},
              "params": []
            }
          ],
          "staticMethods": [],
          "demos": [
            {
              "url": "demo/index.html",
              "description": ""
            }
          ],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 269,
              "column": 6
            },
            "end": {
              "line": 1598,
              "column": 7
            }
          },
          "privacy": "public",
          "superclass": "HTMLElement",
          "name": "Vaadin.ChartElement",
          "attributes": [
            {
              "name": "configuration",
              "description": "Configuration object that exposes the JS Api to configure the chart.\n\nMost important methods are:\n- `addSeries (Object options, [Boolean redraw], [Mixed animation])`\n- `addAxis (Object options, [Boolean isX], [Boolean redraw], [Mixed animation])`\n- `setTitle (Object title, object subtitle, Boolean redraw)`\n\nMost important properties are:\n- `configuration.series`: An array of the chart's series. Detailed API for Series object is\n    available in [API Site](http://api.highcharts.com/class-reference/Highcharts.Series)\n- `configuration.xAxis`: An array of the chart's x axes. Detailed API for Axis object is\n    available in [API Site](http://api.highcharts.com/class-reference/Highcharts.Axis)\n- `configuration.yAxis`: An array of the chart's y axes. Detailed API for Axis object is\n    available in [API Site](http://api.highcharts.com/class-reference/Highcharts.Axis)\n- `configuration.title`: The chart title.\n\nFor detailed documentation of available API check the [API site](http://api.highcharts.com/class-reference/classes.list)",
              "sourceRange": {
                "start": {
                  "line": 302,
                  "column": 12
                },
                "end": {
                  "line": 302,
                  "column": 33
                }
              },
              "metadata": {},
              "type": "Object"
            },
            {
              "name": "categories",
              "description": "If categories are present names are used instead of numbers for the category axis.\nThe format of categories can be an `Array` with a list of categories, such as `['2010', '2011', '2012']`\nor a mapping `Object`, like `{0:'1',9:'Target (10)', 15: 'Max'}`.",
              "sourceRange": {
                "start": {
                  "line": 309,
                  "column": 12
                },
                "end": {
                  "line": 313,
                  "column": 13
                }
              },
              "metadata": {},
              "type": "Object"
            },
            {
              "name": "category-max",
              "description": "Category-axis maximum value. Defaults to `undefined`.",
              "sourceRange": {
                "start": {
                  "line": 318,
                  "column": 12
                },
                "end": {
                  "line": 322,
                  "column": 13
                }
              },
              "metadata": {},
              "type": "number"
            },
            {
              "name": "category-min",
              "description": "Category-axis minimum value. Defaults to `undefined`.",
              "sourceRange": {
                "start": {
                  "line": 327,
                  "column": 12
                },
                "end": {
                  "line": 331,
                  "column": 13
                }
              },
              "metadata": {},
              "type": "number"
            },
            {
              "name": "category-position",
              "description": "The position of the category axis. Acceptable values are `left`, `right`, `top` and `bottom`\nexcept for bar charts which only accept `left` and `right`.\nWith the default value, charts appear as though they have `category-position=\"bottom\"`\nexcept for bar charts that appear as though they have `category-position=\"left\"`.\n\nDefaults to `undefined`",
              "sourceRange": {
                "start": {
                  "line": 341,
                  "column": 12
                },
                "end": {
                  "line": 345,
                  "column": 13
                }
              },
              "metadata": {},
              "type": "string"
            },
            {
              "name": "no-legend",
              "description": "Specifies whether to hide legend or show.\nLegend configuration can be set up via additionalOptions property",
              "sourceRange": {
                "start": {
                  "line": 351,
                  "column": 12
                },
                "end": {
                  "line": 355,
                  "column": 13
                }
              },
              "metadata": {},
              "type": "boolean"
            },
            {
              "name": "stacking",
              "description": "Specifies how series are stacked on top of each other.\nPossible values are null, \"normal\" or \"percent\".\nIf \"stack\" property is not defined on the vaadin-chart-series elements, then series will be put into\nthe default stack.",
              "sourceRange": {
                "start": {
                  "line": 363,
                  "column": 12
                },
                "end": {
                  "line": 367,
                  "column": 13
                }
              },
              "metadata": {},
              "type": "string"
            },
            {
              "name": "timeline",
              "description": "Specifies whether the chart is a normal chart or a timeline chart.",
              "sourceRange": {
                "start": {
                  "line": 372,
                  "column": 12
                },
                "end": {
                  "line": 375,
                  "column": 13
                }
              },
              "metadata": {},
              "type": "boolean"
            },
            {
              "name": "title",
              "description": "Represents the title of the chart.",
              "sourceRange": {
                "start": {
                  "line": 380,
                  "column": 12
                },
                "end": {
                  "line": 384,
                  "column": 13
                }
              },
              "metadata": {},
              "type": "string"
            },
            {
              "name": "tooltip",
              "description": "Whether or not to show tooltip when hovering data points.",
              "sourceRange": {
                "start": {
                  "line": 389,
                  "column": 12
                },
                "end": {
                  "line": 393,
                  "column": 13
                }
              },
              "metadata": {},
              "type": "boolean"
            },
            {
              "name": "type",
              "description": "Sets the default series type of the chart.\nNote that `'bar'`, `'gauge'` and `'solidgauge'` should be set as default series type.",
              "sourceRange": {
                "start": {
                  "line": 399,
                  "column": 12
                },
                "end": {
                  "line": 403,
                  "column": 13
                }
              },
              "metadata": {},
              "type": "string"
            },
            {
              "name": "subtitle",
              "description": "Represents the subtitle of the chart.",
              "sourceRange": {
                "start": {
                  "line": 408,
                  "column": 12
                },
                "end": {
                  "line": 412,
                  "column": 13
                }
              },
              "metadata": {},
              "type": "string"
            },
            {
              "name": "chart3d",
              "description": "Specifies whether to show chart in 3 or in 2 dimensions.\nSome display angles are added by default to the \"chart.options3d\" (`{alpha: 15, beta: 15, depth: 50}`).\n3D display options can be modified via `additionalOptions`.\nThe thickness of a Pie chart can be set on `additionalOptions` through `plotOptions.pie.depth`.\n3D is supported by Bar, Column, Pie and Scatter3D charts.\nMore info available at [Highcharts](https://www.highcharts.com/docs/chart-concepts/3d-charts).",
              "sourceRange": {
                "start": {
                  "line": 422,
                  "column": 12
                },
                "end": {
                  "line": 426,
                  "column": 13
                }
              },
              "metadata": {},
              "type": "boolean"
            },
            {
              "name": "empty-text",
              "description": "Specifies the message displayed on a chart without displayable data.",
              "sourceRange": {
                "start": {
                  "line": 431,
                  "column": 12
                },
                "end": {
                  "line": 436,
                  "column": 13
                }
              },
              "metadata": {},
              "type": "string"
            },
            {
              "name": "additional-options",
              "description": "Represents additional JSON configuration.",
              "sourceRange": {
                "start": {
                  "line": 441,
                  "column": 12
                },
                "end": {
                  "line": 444,
                  "column": 13
                }
              },
              "metadata": {},
              "type": "Object"
            },
            {
              "name": "polar",
              "description": "When present, cartesian charts like line, spline, area and column are transformed\ninto the polar coordinate system.",
              "sourceRange": {
                "start": {
                  "line": 450,
                  "column": 12
                },
                "end": {
                  "line": 454,
                  "column": 13
                }
              },
              "metadata": {},
              "type": "boolean"
            }
          ],
          "events": [
            {
              "type": "CustomEvent",
              "name": "chart-add-series",
              "description": "chart-add-series  Fired when a new series is added",
              "metadata": {}
            },
            {
              "type": "CustomEvent",
              "name": "chart-after-print",
              "description": "chart-after-print  Fired after a chart is printed",
              "metadata": {}
            },
            {
              "type": "CustomEvent",
              "name": "chart-before-print",
              "description": "chart-before-print  Fired before a chart is printed",
              "metadata": {}
            },
            {
              "type": "CustomEvent",
              "name": "chart-click",
              "description": "chart-click  Fired when clicking on the plot background",
              "metadata": {}
            },
            {
              "type": "CustomEvent",
              "name": "chart-drilldown",
              "description": "chart-drilldown  Fired when drilldown point is clicked",
              "metadata": {}
            },
            {
              "type": "CustomEvent",
              "name": "chart-drillup",
              "description": "chart-drillup  Fired when drilling up from a drilldown series",
              "metadata": {}
            },
            {
              "type": "CustomEvent",
              "name": "chart-drillupall",
              "description": "chart-drillupall  Fired after all the series  has been drilled up\n                         if chart has multiple drilldown series",
              "metadata": {}
            },
            {
              "type": "CustomEvent",
              "name": "chart-load",
              "description": "chart-load  Fired when the chart is finished loading",
              "metadata": {}
            },
            {
              "type": "CustomEvent",
              "name": "chart-redraw",
              "description": "chart-redraw  Fired when the chart is redraw. Can be called after a `Chart.configuration.redraw()`\n                     or after an axis, series or point is modified with the `redraw` option set to `true`",
              "metadata": {}
            },
            {
              "type": "CustomEvent",
              "name": "chart-selection",
              "description": "chart-selection  Fired when an area of the chart has been selected",
              "metadata": {}
            },
            {
              "type": "CustomEvent",
              "name": "point-click",
              "description": "point-click  Fired when the point is clicked",
              "metadata": {}
            },
            {
              "type": "CustomEvent",
              "name": "point-legend-item-click",
              "description": "point-legend-item-click  Fired when the legend item belonging to the point is clicked",
              "metadata": {}
            },
            {
              "type": "CustomEvent",
              "name": "point-mouse-out",
              "description": "point-mouse-out  Fired when the mouse leaves the area close to the point",
              "metadata": {}
            },
            {
              "type": "CustomEvent",
              "name": "point-mouse-over",
              "description": "point-mouse-over  Fired when the mouse enters the area close to the point",
              "metadata": {}
            },
            {
              "type": "CustomEvent",
              "name": "point-remove",
              "description": "point-remove  Fired when the point is removed from the series",
              "metadata": {}
            },
            {
              "type": "CustomEvent",
              "name": "point-select",
              "description": "point-select  Fired when the point is selected etheir programmatically or by clicking on the point",
              "metadata": {}
            },
            {
              "type": "CustomEvent",
              "name": "point-unselect",
              "description": "point-unselect  Fired when the point is unselected etheir programmatically or by clicking on the point",
              "metadata": {}
            },
            {
              "type": "CustomEvent",
              "name": "point-update",
              "description": "point-update  Fired when the point is updated programmatically through `.update()` method",
              "metadata": {}
            },
            {
              "type": "CustomEvent",
              "name": "series-after-animate",
              "description": "series-after-animate  Fired when the series has finished its initial animation",
              "metadata": {}
            },
            {
              "type": "CustomEvent",
              "name": "series-checkbox-click",
              "description": "series-checkbox-click  Fired when the checkbox next to the series' name in the legend is clicked",
              "metadata": {}
            },
            {
              "type": "CustomEvent",
              "name": "series-click",
              "description": "series-click  Fired when the series is clicked",
              "metadata": {}
            },
            {
              "type": "CustomEvent",
              "name": "series-hide",
              "description": "series-hide  Fired when the series is hidden after chart generation time",
              "metadata": {}
            },
            {
              "type": "CustomEvent",
              "name": "series-legend-item-click",
              "description": "series-legend-item-click  Fired when the legend item belonging to the series is clicked",
              "metadata": {}
            },
            {
              "type": "CustomEvent",
              "name": "series-mouse-out",
              "description": "series-mouse-out  Fired when the mouses leave the graph",
              "metadata": {}
            },
            {
              "type": "CustomEvent",
              "name": "series-mouse-over",
              "description": "series-mouse-over  Fired when the mouse enters the graph",
              "metadata": {}
            },
            {
              "type": "CustomEvent",
              "name": "series-show",
              "description": "series-show  Fired when the series is show after chart generation time",
              "metadata": {}
            },
            {
              "type": "CustomEvent",
              "name": "xaxes-extremes-set",
              "description": "xaxes-extremes-set  Fired when when the minimum and maximum is set for the x axis",
              "metadata": {}
            },
            {
              "type": "CustomEvent",
              "name": "yaxes-extremes-set",
              "description": "yaxes-extremes-set  Fired when when the minimum and maximum is set for the y axis",
              "metadata": {}
            }
          ],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": [
            {
              "description": "",
              "name": "",
              "range": {
                "file": "vaadin-chart.html",
                "start": {
                  "line": 49,
                  "column": 4
                },
                "end": {
                  "line": 49,
                  "column": 27
                }
              }
            }
          ],
          "tagname": "vaadin-chart"
        }
      ]
    }
  ],
  "classes": [
    {
      "description": "",
      "summary": "",
      "path": "chart-deep-merger.js",
      "properties": [],
      "methods": [],
      "staticMethods": [
        {
          "name": "__isObject",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "start": {
              "line": 6,
              "column": 2
            },
            "end": {
              "line": 8,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "item"
            }
          ]
        },
        {
          "name": "__deepMerge",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "start": {
              "line": 10,
              "column": 2
            },
            "end": {
              "line": 26,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "target"
            },
            {
              "name": "source"
            }
          ]
        }
      ],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 4,
          "column": 39
        },
        "end": {
          "line": 27,
          "column": 1
        }
      },
      "privacy": "public"
    },
    {
      "description": "",
      "summary": "",
      "path": "chart-labels-mapper.js",
      "properties": [],
      "methods": [
        {
          "name": "__isFunction",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "start": {
              "line": 26,
              "column": 2
            },
            "end": {
              "line": 28,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value"
            }
          ]
        },
        {
          "name": "__isObject",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "start": {
              "line": 30,
              "column": 2
            },
            "end": {
              "line": 32,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "item"
            }
          ]
        },
        {
          "name": "__tryPassFunction",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "start": {
              "line": 34,
              "column": 2
            },
            "end": {
              "line": 41,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value"
            }
          ]
        },
        {
          "name": "__tryPassArrayOrObject",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "start": {
              "line": 43,
              "column": 2
            },
            "end": {
              "line": 53,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value"
            }
          ]
        },
        {
          "name": "__assignMapper",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "start": {
              "line": 55,
              "column": 2
            },
            "end": {
              "line": 58,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value"
            },
            {
              "name": "type"
            }
          ]
        },
        {
          "name": "map",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 60,
              "column": 2
            },
            "end": {
              "line": 92,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "values"
            }
          ]
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 4,
          "column": 41
        },
        "end": {
          "line": 93,
          "column": 1
        }
      },
      "privacy": "public"
    },
    {
      "description": "",
      "summary": "",
      "path": "chart-deep-merger.js",
      "properties": [],
      "methods": [],
      "staticMethods": [
        {
          "name": "__isObject",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "start": {
              "line": 6,
              "column": 2
            },
            "end": {
              "line": 8,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "item"
            }
          ]
        },
        {
          "name": "__deepMerge",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "start": {
              "line": 10,
              "column": 2
            },
            "end": {
              "line": 26,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "target"
            },
            {
              "name": "source"
            }
          ]
        }
      ],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 4,
          "column": 39
        },
        "end": {
          "line": 27,
          "column": 1
        }
      },
      "privacy": "public"
    }
  ]
}
